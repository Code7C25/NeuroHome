#include <SPI.h>
#include <MFRC522.h>
#include <Servo.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

#define SS_PIN    10
#define RST_PIN   9
#define SERVO_PIN 3

MFRC522 mfrc522(SS_PIN, RST_PIN);
Servo servo;
LiquidCrystal_I2C lcd(0x27, 16, 2); // dirección típica 0x27; si no funciona prueba 0x3F

// Cambia por el UID de tu tarjeta (mayúsculas, sin espacios)
const String tarjetaAutorizada = "8CE2A700";

// Ajustes de movimiento
const int POS_CERRADA = 0;
const int POS_ABIERTA = 90;
const int STEP_DELAY_MS = 12;
const int STEP_SIZE = 1;

// Tiempos
const unsigned long TIEMPO_ABIERTA_MS = 4000;
const unsigned long COOLDOWN_MS = 3000;

unsigned long ultimoAcceso = 0;

void setup() {
  Serial.begin(9600);
  SPI.begin();
  mfrc522.PCD_Init();

  servo.attach(SERVO_PIN);
  servo.write(POS_CERRADA);

  lcd.init();
  lcd.backlight();
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("RFID + SERVO");
  lcd.setCursor(0, 1);
  lcd.print("Sistema listo");
  delay(2000);
  lcd.clear();
  lcd.print("Acerque tarjeta");

  Serial.println(F("=== RFID + SERVO: Sistema listo ==="));
}

void loop() {
  if (!mfrc522.PICC_IsNewCardPresent()) return;
  if (!mfrc522.PICC_ReadCardSerial()) return;

  // Construir UID
  String uidString = "";
  for (byte i = 0; i < mfrc522.uid.size; i++) {
    if (mfrc522.uid.uidByte[i] < 0x10) uidString += "0";
    uidString += String(mfrc522.uid.uidByte[i], HEX);
  }
  uidString.toUpperCase();

  Serial.print(F("UID detectado: "));
  Serial.println(uidString);

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("UID:");
  lcd.setCursor(0, 1);
  lcd.print(uidString);

  delay(1000);

  unsigned long ahora = millis();

  if (uidString == tarjetaAutorizada) {
    if (ahora - ultimoAcceso >= COOLDOWN_MS) {
      Serial.println(F("? Tarjeta autorizada. Abriendo puerta..."));
      lcd.clear();
      lcd.print("Tarjeta OK");
      lcd.setCursor(0, 1);
      lcd.print("Abriendo puerta");
      abrirPuertaSuave();
      ultimoAcceso = ahora;

      lcd.clear();
      lcd.print("Puerta abierta");
      delay(TIEMPO_ABIERTA_MS);

      Serial.println(F("Cerrando puerta..."));
      lcd.clear();
      lcd.print("Cerrando puerta");
      cerrarPuertaSuave();

      lcd.clear();
      lcd.print("Listo!");
      delay(1000);
      lcd.clear();
      lcd.print("Acerque tarjeta");
    } else {
      Serial.println(F("Cooldown activo"));
      lcd.clear();
      lcd.print("Cooldown...");
      delay(1000);
      lcd.clear();
      lcd.print("Acerque tarjeta");
    }
  } else {
    Serial.println(F("? Tarjeta no autorizada"));
    lcd.clear();
    lcd.print("NO AUTORIZADA!");
    delay(1500);
    lcd.clear();
    lcd.print("Acerque tarjeta");
  }

  mfrc522.PICC_HaltA();
  mfrc522.PCD_StopCrypto1();
}

void abrirPuertaSuave() {
  int current = servo.read();
  if (current < POS_CERRADA) current = POS_CERRADA;
  for (int pos = current; pos <= POS_ABIERTA; pos += STEP_SIZE) {
    servo.write(pos);
    delay(STEP_DELAY_MS);
  }
  servo.write(POS_ABIERTA);
}

void cerrarPuertaSuave() {
  int current = servo.read();
  if (current > POS_ABIERTA) current = POS_ABIERTA;
  for (int pos = current; pos >= POS_CERRADA; pos -= STEP_SIZE) {
    servo.write(pos);
    delay(STEP_DELAY_MS);
  }
  servo.write(POS_CERRADA);
}
