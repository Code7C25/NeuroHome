#include <SPI.h>
#include <MFRC522.h>
#include <Servo.h>

#define SS_PIN    10
#define RST_PIN   9
#define SERVO_PIN 3

MFRC522 mfrc522(SS_PIN, RST_PIN);
Servo servo;

// Cambia por el UID de tu tarjeta (mayúsculas, sin espacios)
const String tarjetaAutorizada = "8CE2A700";

// Ajustes de movimiento
const int POS_CERRADA = 0;    // ángulo puerta cerrada
const int POS_ABIERTA = 90;   // ángulo puerta abierta
const int STEP_DELAY_MS = 12; // tiempo entre pasos para movimiento suave (menor = más rápido)
const int STEP_SIZE = 1;      // incremento en grados por paso

// Tiempos
const unsigned long TIEMPO_ABIERTA_MS = 4000; // cuánto se mantiene abierta (4s)
const unsigned long COOLDOWN_MS = 3000;      // tiempo mínimo entre aperturas

unsigned long ultimoAcceso = 0;

void setup() {
  Serial.begin(9600);
  while (!Serial); // opcional, en algunas placas espera al monitor serie

  SPI.begin();
  mfrc522.PCD_Init();

  servo.attach(SERVO_PIN);
  servo.write(POS_CERRADA);

  Serial.println(F("=== RFID + SERVO: Sistema listo ==="));
  Serial.println(F("Acerque la tarjeta autorizada..."));
  Serial.println();
}

void loop() {
  // Si no hay nueva tarjeta, salimos
  if (!mfrc522.PICC_IsNewCardPresent()) return;
  if (!mfrc522.PICC_ReadCardSerial()) return;

  // Construir UID como String en mayúsculas
  String uidString = "";
  for (byte i = 0; i < mfrc522.uid.size; i++) {
    if (mfrc522.uid.uidByte[i] < 0x10) uidString += "0";
    uidString += String(mfrc522.uid.uidByte[i], HEX);
  }
  uidString.toUpperCase();

  Serial.print(F("UID detectado: "));
  Serial.println(uidString);

  // Evitar reactivar repetidamente
  unsigned long ahora = millis();
  if (uidString == tarjetaAutorizada) {
    if (ahora - ultimoAcceso >= COOLDOWN_MS) {
      Serial.println(F("? Tarjeta autorizada. Abriendo puerta..."));
      abrirPuertaSuave();
      ultimoAcceso = ahora;
      delay(TIEMPO_ABIERTA_MS); // Mantener abierta
      Serial.println(F("Cerrando puerta..."));
      cerrarPuertaSuave();
      Serial.println(F("Listo."));
    } else {
      Serial.println(F("Tarjeta autorizada, pero en cooldown. Ignorando."));
    }
  } else {
    Serial.println(F("? Tarjeta no autorizada"));
  }

  Serial.println(F("------------------------------"));

  // Finalizar lectura
  mfrc522.PICC_HaltA();
  mfrc522.PCD_StopCrypto1();
}

// Mueve el servo de cerrado->abierto suavemente
void abrirPuertaSuave() {
  int current = servo.read(); // lectura aproximada de la posición actual
  if (current < POS_CERRADA) current = POS_CERRADA;
  for (int pos = current; pos <= POS_ABIERTA; pos += STEP_SIZE) {
    servo.write(pos);
    delay(STEP_DELAY_MS);
  }
  servo.write(POS_ABIERTA);
}

// Mueve el servo de abierto->cerrado suavemente
void cerrarPuertaSuave() {
  int current = servo.read();
  if (current > POS_ABIERTA) current = POS_ABIERTA;
  for (int pos = current; pos >= POS_CERRADA; pos -= STEP_SIZE) {
    servo.write(pos);
    delay(STEP_DELAY_MS);
  }
  servo.write(POS_CERRADA);
}